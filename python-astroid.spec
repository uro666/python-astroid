#%%undefine _debugsource_packages

# Doesn't work because of test cases intentionally containing
# bits that can't be compiled (invalid-encoding.py)
#%%define _python_bytecompile_errors_terminate_build 0

%define module astroid
%bcond_without test

Name:		python-astroid
Version:	3.3.9
Release:	1
Summary:	An abstract syntax tree for Python with inference support
URL:		https://pypi.org/project/astroid/
License:	LGPL-2.1-or-later
Group:		Development/Python
Source0:	https://files.pythonhosted.org/packages/source/a/astroid/astroid-%{version}.tar.gz
BuildSystem:	python
BuildArch:	noarch

BuildRequires:	python
BuildRequires:	pkgconfig(python3)
BuildRequires:	python%{pyver}dist(setuptools)
BuildRequires:	python%{pyver}dist(wheel)
BuildRequires:	python%{pyver}dist(typing-extensions) >= 4.4.0
%if %{with test}
BuildRequires:	python%{pyver}dist(mypy)
BuildRequires:	python%{pyver}dist(attrs)
BuildRequires:	python%{pyver}dist(coverage)
BuildRequires:	python%{pyver}dist(nose)
BuildRequires:	python%{pyver}dist(numpy)
BuildRequires:	python%{pyver}dist(pyqt6)
BuildRequires:	python%{pyver}dist(pydantic)
BuildRequires:	python%{pyver}dist(pytest)
BuildRequires:	python%{pyver}dist(python-dateutil)
BuildRequires:	python%{pyver}dist(regex)
BuildRequires:	python%{pyver}dist(setuptools)
BuildRequires:	python%{pyver}dist(six)
BuildRequires:	python%{pyver}dist(typing-extensions) >= 4.4.0
BuildRequires:	python%{pyver}dist(urllib3)
%endif
Requires:	python%{pyver}dist(typing-extensions) >= 4.4.0

%description
An abstract syntax tree for Python with inference support.

The aim of this module is to provide a common base representation of python
source code. It is currently the library powering pylintâ€™s capabilities.

It provides a compatible representation which comes from the _ast module.

It rebuilds the tree generated by the builtin _ast module by recursively
walking down the AST and building an extended ast. The new node classes
have additional methods and attributes for different usages. They include
some support for static inference and local name scopes.

Furthermore, astroid can also build partial trees by inspecting living objects.

%prep
%autosetup -n %{module}-%{version} -p1

%build
%py_build

%install
%py3_install

%if %{with test}
%check
# for why skip test_pydantic_field see:
# https://github.com/pylint-dev/astroid/issues/2392
pytest -v -k "not test_pydantic_field"
%endif

%files
%{py_sitedir}/%{module}
%{py_sitedir}/%{module}-%{version}*.*-info
%license LICENSE
%doc README.rst
